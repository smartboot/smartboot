(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[757],{9033:(t,r,a)=>{"use strict";a.r(r),a.d(r,{data:()=>e});const e={key:"v-4d2d72cf",path:"/smart-http/security.html",title:"安全性设计",lang:"zh-CN",frontmatter:{author:"三刀",time:"2021-06-09T00:00:00.000Z"},excerpt:"",headers:[{level:3,title:"背景",slug:"背景",children:[]},{level:3,title:"设计思路",slug:"设计思路",children:[]}],filePathRelative:"smart-http/security.md",git:{updatedTime:1624154752e3}}},815:(t,r,a)=>{"use strict";a.r(r),a.d(r,{default:()=>h});const e=(0,a(6252).uE)('<h1 id="安全性设计"><a class="header-anchor" href="#安全性设计">#</a> 安全性设计</h1><h3 id="背景"><a class="header-anchor" href="#背景">#</a> 背景</h3><p>大家在选择服务器时，通常会关注它的性能、稳定性以及资源开销。然而，服务器的「<strong>安全性</strong>」也是尤为重要的，相信没有人希望看到自己的系统被黑客光顾。 各大厂商通常也会在服务器的安全性建设上投入巨大资源，smart-http 对此也是非常重视。</p><h3 id="设计思路"><a class="header-anchor" href="#设计思路">#</a> 设计思路</h3><p>相信很多人都听过一句名言：「最坚固的堡垒都是从内部攻破的」。 我们最不希望看到的一幕，是因为 smart-http 在迭代的过程中，由于引入某个 bug 导致安全体系遭受冲击。 这种情况对于我们自己以及使用 smart-http 的客户，都是不可容忍的。 为此，我们选择使用单元测试的形式，通过持续性沉淀各种正常或异常的场景，从内部加固 smart-http 的安全性。</p><p>另一方面，我们还会引入外部测试工具，对 smart-http 服务进行暴力攻击。通过权威可信任的第三方，输出 smart-http 的安全检查报告。</p><h4 id="关于开源"><a class="header-anchor" href="#关于开源">#</a> 关于开源</h4><p>我们会毫不避讳的开源全部 smart-http 以及单测的代码。 在早期如若出现漏洞或许会让某些不怀好意的人得以利用，但我们更愿意相信社区的力量能够帮助我们及时发现并堵住安全缺口。 总之，无论今后会面临何种局面，smart-http 的核心代码 100% 开源。</p><p><strong>最后</strong><br> 我们非常欢迎且诚挚的邀请每一位支持开源的朋友来&quot;攻击&quot; smart-http，并贡献相应的应对策略。 开源，能够让 smart-http 越来越安全，也让用户越来越放心的选择 smart-http。</p>',9),h={render:function(t,r){return e}}}}]);