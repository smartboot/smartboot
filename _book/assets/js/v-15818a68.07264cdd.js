(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[357],{9147:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-15818a68",path:"/smart-http/http-server-config.html",title:"服务配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基础配置",slug:"基础配置",children:[{level:3,title:"setPort",slug:"setport",children:[]},{level:3,title:"pipeline",slug:"pipeline",children:[]},{level:3,title:"pipeline",slug:"pipeline-1",children:[]},{level:3,title:"wsPipeline",slug:"wspipeline",children:[]}]},{level:2,title:"进阶配置",slug:"进阶配置",children:[{level:3,title:"bannerEnabled",slug:"bannerenabled",children:[]},{level:3,title:"readBufferSize",slug:"readbuffersize",children:[]},{level:3,title:"writeBufferSize",slug:"writebuffersize",children:[]},{level:3,title:"threadNum",slug:"threadnum",children:[]},{level:3,title:"host",slug:"host",children:[]},{level:3,title:"headerLimiter",slug:"headerlimiter",children:[]}]}],filePathRelative:"smart-http/http-server-config.md",git:{updatedTime:null}}},5112:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="服务配置"><a class="header-anchor" href="#服务配置">#</a> 服务配置</h1><p>Http 服务运行需要依赖较多的配置项，未来还会继续扩充。 我们已为大部分配置项设定了默认值，基本达到了开箱即用的程度，如果您有个性化的需求，可以参考本文进行针对性调整。</p><h2 id="基础配置"><a class="header-anchor" href="#基础配置">#</a> 基础配置</h2><p>我们将定义在<code>HttpBootstrap</code>中的配置项视为「基础配置」。</p><h3 id="setport"><a class="header-anchor" href="#setport">#</a> setPort</h3><ul><li><p>入参类型：<code>int</code></p></li><li><p>默认值： <code>8080</code></p></li><li><p>详情：<br> 设置 Http 服务的启动监听端口号。</p></li><li><p>示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpBootstrapDemo</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">HttpBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="pipeline"><a class="header-anchor" href="#pipeline">#</a> pipeline</h3><ul><li><p>入参类型：<code>HttpServerHandler</code></p></li><li><p>详情：<br> 设置 Http 请求的处理 Handler。若未指定，则返回空响应。</p></li><li><p>示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpBootstrapDemo</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">HttpBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h3 id="pipeline-1"><a class="header-anchor" href="#pipeline-1">#</a> pipeline</h3><ul><li><p>入参类型：<code>无</code></p></li><li><p>详情：<br> 注册 Http 请求的处理 Handler，且支持链式调用。当注册了多个 Handler 时，需要通过执行 <code>doNext</code> 进入下一个 Handler。</p></li><li><p>示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpBootstrapDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpBootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bootstrap<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;first handle&lt;br/&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">doNext</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;second handle&lt;br/&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bootstrap<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><h3 id="wspipeline"><a class="header-anchor" href="#wspipeline">#</a> wsPipeline</h3><ul><li><p>入参类型：<code>无</code></p></li><li><p>详情：<br> 注册 Websocket 请求的处理 Handler，且支持链式调用。当注册了多个 Handler 时，需要通过执行 <code>doNext</code> 进入下一个 Handler。</p></li><li><p>示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpBootstrapDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpBootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bootstrap<span class="token punctuation">.</span><span class="token function">wsPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">WebSocketResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                response<span class="token punctuation">.</span><span class="token function">sendTextMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bootstrap<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h2 id="进阶配置"><a class="header-anchor" href="#进阶配置">#</a> 进阶配置</h2><p>该类型的配置项存放中<code>HttpServerConfiguration</code>中，可以通过<code>HttpBootstrap#configuration</code>获取引用对象。</p><h3 id="bannerenabled"><a class="header-anchor" href="#bannerenabled">#</a> bannerEnabled</h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>详情：<br> 设置是否在控制台打印 smart-http 的启动 banner。<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>                               _       _      _    _          \n                              ( )_    ( )    ( )_ ( )_        \n  ___   ___ ___     _ _  _ __ | ,_)   | |__  | ,_)| ,_) _ _   \n/&#39;,__)/&#39; _ ` _ `\\ /&#39;_` )( &#39;__)| |     |  _ `\\| |  | |  ( &#39;_`\\\n\\__, \\| ( ) ( ) |( (_| || |   | |_    | | | || |_ | |_ | (_) )\n(____/(_) (_) (_)`\\__,_)(_)   `\\__)   (_) (_)`\\__)`\\__)| ,__/&#39;\n                                                       | |    \n                                                       (_)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h3 id="readbuffersize"><a class="header-anchor" href="#readbuffersize">#</a> readBufferSize</h3><ul><li>类型：<code>int</code></li><li>默认值：<code>1024</code></li><li>详情：<br> 读缓冲区字节数。</li></ul><h3 id="writebuffersize"><a class="header-anchor" href="#writebuffersize">#</a> writeBufferSize</h3><ul><li>类型：<code>int</code></li><li>默认值：<code>1024</code></li><li>详情：<br> 写缓冲区字节数。</li></ul><h3 id="threadnum"><a class="header-anchor" href="#threadnum">#</a> threadNum</h3><ul><li>类型：<code>int</code></li><li>默认值：同 CPU 核数</li><li>详情：<br> Http 服务处理线程数。</li></ul><h3 id="host"><a class="header-anchor" href="#host">#</a> host</h3><ul><li>类型：<code>String</code></li><li>默认值：<code>null</code></li><li>详情：<br> 服务端绑定 host 地址。</li></ul><h3 id="headerlimiter"><a class="header-anchor" href="#headerlimiter">#</a> headerLimiter</h3><ul><li>类型：<code>int</code></li><li>默认值：<code>100</code></li><li>详情：<br> 支持解析 Header 的最大个数，超过部分将被忽略。注意：若该配置项若设置太小，可能导致无法识别 websocket 请求。</li></ul>',26),e={render:function(n,s){return p}}}}]);