(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{385:function(t,a,s){"use strict";s.r(a);var e=s(7),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("很多用户比较关心 smart-mqtt 的性能表现，为了得出一个相对准确的结论。我们通过自研的压测工具分别对 smart-mqtt 和同类产品进行压测。")]),t._v(" "),a("h2",{attrs:{id:"一、环境准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、环境准备"}},[t._v("#")]),t._v(" 一、环境准备")]),t._v(" "),a("p",[t._v("一台装有 Docker 的 Linux服务器、Windows 或者 Macbook。")]),t._v(" "),a("blockquote",[a("p",[t._v("支持主流的 amd64 和 arm64 架构。")])]),t._v(" "),a("h2",{attrs:{id:"二、压测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、压测"}},[t._v("#")]),t._v(" 二、压测")]),t._v(" "),a("p",[t._v("在 smart-mqtt 的仓库根目录下，我们提供了用于性能测试的 "),a("a",{attrs:{href:"https://gitee.com/smartboot/smart-mqtt/blob/master/docker-compose.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-compose.yml"),a("OutboundLink")],1),t._v(" 文件。")]),t._v(" "),a("p",[t._v("在这个文件中包含了多款 MQTT Broker，对应的 docker 服务名皆为：mqtt-broker。\n当需要对某个 broker 进行测试时，只需移除其注释，将另外的同名服务注释掉便可（即同时刻只能存在一个服务名为 "),a("code",[t._v("mqtt-broker")]),t._v(" 的docker容器）。")]),t._v(" "),a("p",[t._v("目前以支持的有：")]),t._v(" "),a("ul",[a("li",[t._v("smart-mqtt")]),t._v(" "),a("li",[t._v("emqx")]),t._v(" "),a("li",[t._v("BifroMQ")])]),t._v(" "),a("h3",{attrs:{id:"_2-1-压测场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-压测场景"}},[t._v("#")]),t._v(" 2.1 压测场景")]),t._v(" "),a("p",[a("code",[t._v("docker-compose.yml")]),t._v("中的 smart-mqtt-bench 是用于压测的客户端服务，需要针对不同的压测场景配置压测参数。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("消息订阅")])]),t._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("smart-mqtt-bench")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#省略其他配置...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" java "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cp smart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("mqtt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("bench.jar  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dhost=mqtt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("broker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dconnect=2000 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dqos=2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dpublisher=10 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dcount=1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dpayload=128 org.smartboot.bench.mqtt.Subscribe\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("code",[t._v("smart-mqtt-bench.command")]),t._v("参数说明：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数名")]),t._v(" "),a("th",[t._v("参数描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("host")]),t._v(" "),a("td",[t._v("MQTT Broker地址，已针对压测对象配置完成，无需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("port")]),t._v(" "),a("td",[t._v("MQTT Broekr服务的端口号，默认：1883，不推荐调整。")])]),t._v(" "),a("tr",[a("td",[t._v("connect")]),t._v(" "),a("td",[t._v("压测客户端数量，默认：1000，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("payload")]),t._v(" "),a("td",[t._v("压测消息的 payload 字节数，默认：128，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("topic")]),t._v(" "),a("td",[t._v("压测订阅的Topic数量，默认：128，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("publisher")]),t._v(" "),a("td",[t._v("负责生产消息的客户端数量，默认：1。")])]),t._v(" "),a("tr",[a("td",[t._v("count")]),t._v(" "),a("td",[t._v("每个publisher周期内发送的消息数量，默认：1。")])])])]),t._v(" "),a("p",[t._v("每秒中发送的最多消息数为："),a("code",[t._v("publisher * count * 500")]),t._v("，所以"),a("code",[t._v("connect")]),t._v("个订阅者产生订阅量理论值为："),a("code",[t._v("publisher * count * 500 * connect")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("消息发布")])]),t._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("smart-mqtt-bench")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#省略其他配置...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" java "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cp smart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("mqtt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("bench.jar  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dhost=mqtt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("broker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dconnect=2000 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dqos=0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dcount=10 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Dpayload=128 org.smartboot.bench.mqtt.Publish\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("code",[t._v("smart-mqtt-bench.command")]),t._v("参数说明：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数名")]),t._v(" "),a("th",[t._v("参数描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("host")]),t._v(" "),a("td",[t._v("MQTT Broker地址，已针对压测对象配置完成，无需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("port")]),t._v(" "),a("td",[t._v("MQTT Broekr服务的端口号，默认：1883，不推荐调整。")])]),t._v(" "),a("tr",[a("td",[t._v("connect")]),t._v(" "),a("td",[t._v("压测客户端数量，默认：1000，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("payload")]),t._v(" "),a("td",[t._v("压测消息的 payload 字节数，默认：1024，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("topic")]),t._v(" "),a("td",[t._v("压测订阅的Topic数量，默认：128，可按需调整。")])]),t._v(" "),a("tr",[a("td",[t._v("count")]),t._v(" "),a("td",[t._v("每个publisher周期内发送的消息数量，默认：1。")])])])]),t._v(" "),a("p",[t._v("每秒中发送的最多消息数为："),a("code",[t._v("connect * count * 500")]),t._v("。")])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-压测步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-压测步骤"}},[t._v("#")]),t._v(" 2.2 压测步骤")]),t._v(" "),a("ol",[a("li",[t._v("在 "),a("code",[t._v("docker-compose.yml")]),t._v(" 文件中设置压测场景参数，移除待压测的broker注释。")]),t._v(" "),a("li",[t._v("打开终端切换至"),a("code",[t._v("docker-compose.yml")]),t._v("所在目录执行命令："),a("code",[t._v("docker compose up -d")])]),t._v(" "),a("li",[t._v("执行命令观察日志："),a("code",[t._v("docker compose logs -f")]),t._v("。")]),t._v(" "),a("li",[t._v("当压测数据稳定后，退出日志观察，执行"),a("code",[t._v("docker compose down")]),t._v("销毁压测环境。")])]),t._v(" "),a("h2",{attrs:{id:"三、关于压测工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、关于压测工具"}},[t._v("#")]),t._v(" 三、关于压测工具")]),t._v(" "),a("p",[t._v("早些时候也调研了一下市面上的MQTT压测工具，相对来说"),a("code",[t._v("emqtt-bench")]),t._v("是个不错的选择。\n但是由于该工具只提供了 amd64 的 Docker 镜像，而本人的常用开发电脑是 ARM 架构，所以不太适用。")]),t._v(" "),a("p",[t._v("况且开发一款压测工具也并非难事，干脆自己写一个 Java 版的 MQTT 压测工具："),a("strong",[a("code",[t._v("smart-mqtt-bench")])]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"四、常见问题解答"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、常见问题解答"}},[t._v("#")]),t._v(" 四、常见问题解答")]),t._v(" "),a("ol",[a("li",[t._v("压测环境准备阶段需要多久？"),a("br"),t._v("\nsmart-mqtt-bench会在启动10秒后开始执行压测。因为emqx容器在启动初期还处于不可用状态，经测试10秒之后可以执行压测。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);