(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{2065:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-d9022bce",path:"/smart-socket/chapter-5/",title:"第四章 内存池",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"4.1 设计原理",slug:"_4-1-设计原理",children:[]},{level:2,title:"4.2 内存池实践",slug:"_4-2-内存池实践",children:[]},{level:2,title:"4.3 总结",slug:"_4-3-总结",children:[]}],filePathRelative:"smart-socket/chapter-5/README.md",git:{updatedTime:1623571657e3}}},9533:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="第四章-内存池"><a class="header-anchor" href="#第四章-内存池">#</a> 第四章 内存池</h1><p>内存池似乎已经当下各个牛逼框架的标配，我们也专门为smart-socket度身打造了一款内存池解决方案。当然我们并不是为了盲目跟风，确实是有一些问题需要通过该项技术得以解决，并且smart-socket的内存池表现非常令人满意。在此跟大家分享一下smart-socket内存池的设计理念，但愿能与读者朋友产生共鸣。</p><p><strong>概念描述</strong></p><ol><li>内存池：BufferPool<br> 一个内存池中包含了多个内存页<code>BufferPage</code>，为内存申请源提供内存页的分配策略，并且运行着低优先级异步任务将未使用的内存块<code>chunk</code>回收至内存页<code>BufferPage</code>。</li><li>内存页：BufferPage<br> 其本质就是一个由用户指定大小的 ByteBuffer 对象，DirectByteBuffer 和 HeapByteBuffer 皆可。通过事先初始化足够大小的内存页，服务运行期间可快速响应内存需求。</li><li>内存块：chunk<br> 从 BufferPage 中划分出来的小块内存以满足通信所需，内存块的的申请尽量遵循按需申请，用完即还原则。当内存页中剩余空间不足以满足申请源需求大小时，smart-socket 将向 JVM 申请临时内存块。</li></ol><p>smart-socket引入内存池设计，主要为了解决两个问题：零拷贝、对象复用。</p><ul><li><p>零拷贝；</p><p>接触过Netty的朋友应该都听说过该项技术，这项技术的原理也很简单。在数据传输时，如果存储数据的ByteBuffer是堆内缓冲区对象HeapByteBuffer，则在输出时JVM会将该缓冲区的数据拷贝到堆外的直接缓冲区DirectByteBuffer再输出，该场景就存在一次内存拷贝。而如果一开始我们就将数据写入直接缓冲区DirectByteBuffer，则无需进行数据拷贝便可输出数据，这就是所谓的零拷贝，而零拷贝所带来的好处就是节省了临时内存和CPU的消耗，以下便是JVM执行数据输出的处理方式，阅读源码有助于读者朋友更深刻的理解零拷贝。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">FileDescriptor</span> var0<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token class-name">NativeDispatcher</span> var4<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token keyword">instanceof</span> <span class="token class-name">DirectBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">writeFromNativeBuffer</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> var5 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> var6 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">assert</span> var5 <span class="token operator">&lt;=</span> var6<span class="token punctuation">;</span>\n\n            <span class="token keyword">int</span> var7 <span class="token operator">=</span> var5 <span class="token operator">&lt;=</span> var6 <span class="token operator">?</span> var6 <span class="token operator">-</span> var5 <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token class-name">ByteBuffer</span> var8 <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">getTemporaryDirectBuffer</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">int</span> var10<span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                var8<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                var8<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                var1<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>var5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">int</span> var9 <span class="token operator">=</span> <span class="token function">writeFromNativeBuffer</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> var8<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>var9 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    var1<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>var5 <span class="token operator">+</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                var10 <span class="token operator">=</span> var9<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">offerFirstTemporaryDirectBuffer</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> var10<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li><li><p>复用对象；</p><p>实现对象的复用一方面可以节省对象构造造成的时间成本，另一方面可以大大减少运行过程中产生的对象数，缓解GC压力。特别对于直接缓冲区DirectByteBuffer对象，不仅创建耗时长，而且因其存在于堆外内存中导致无法通过垃圾回收器释放内存，非常适合通过池化管理提升对象复用率。</p></li></ul><h2 id="_4-1-设计原理"><a class="header-anchor" href="#_4-1-设计原理">#</a> 4.1 设计原理</h2><p>​ smart-socket内存池的设计原理比较简单，事先在堆外内存中申请一个大的DirectByteBuffer，后续使用时通过DirectByteBuffer映射出实际所需大小的虚拟Buffer于堆内空间中。所以这VirtualBuffer其实就是堆外内存在堆内内存中创建的一个索引，smart-socket在堆内空间中对VirtualBuffer的一切数据读写操作都会同步反应至堆外的DirectByteBuffer中。</p><img src="docs/smart-socket/chapter-5/bufferpool_1.png" width="60%"><p>接下来通过几张图示范一下内存池的运作流程。例如：</p><ol><li><p>我们需要一块长度为2的ByteBuffer，那么我们就映射出一个VirtualBuffer占用堆外内存中的两个字节空间。</p></li><li><p>之后我们还需要一块长度为4的ByteBuffer，那就只能申请下标3至6的空间。</p><img src="docs/smart-socket/chapter-5/bufferpool_2.png" width="60%"></li><li><p>当虚拟内存使用完毕后，要及时释放占用的堆外内存。</p><img src="docs/smart-socket/chapter-5/bufferpool_3.png" width="60%"></li><li><p>下一次再需要空间时继续从可用空间中申请。</p><img src="docs/smart-socket/chapter-5/bufferpool_4.png" width="60%"></li></ol><p>​ 通过不断的申请、释放，smart-socket内存池便运转起来了。需要注意的事，内存的申请是从头到尾进行扫描，而释放回收是无时序的，如图4-1-4。所以在实际运行中会产生一些不连续的小内存块，也就是内存碎片。内存碎片化是个必然存在的状况，假如这种小颗粒内存碎片占比增高，会降低虚拟内存申请的成功率。如果虚拟内存申请失败，smart-socket内存池会启用备用方案,采用申请堆内缓冲区的方式满足应用所需，此类缓冲区使用完毕后可由垃圾回收器释放。这样一种堆外为主，堆内为辅的设计方案，保障了smart-socket内存池的稳定、高效。</p><h2 id="_4-2-内存池实践"><a class="header-anchor" href="#_4-2-内存池实践">#</a> 4.2 内存池实践</h2><p>​ 前文讲完了smart-socket内存池的设计原理，但在实践中还会面临一个情况，便是内存分配、回收时面临的并发问题。尽管只需加同步锁控便能解决，但是在高并发场景下的锁竞争会比较激烈，为了缓解这一状况。smart-socket内存池中引入了内存页BufferPage的概念。内存池中创建一组BufferPage，每个BufferPage各自封装一个大的DirectByteBuffer。再根据特定的分配策略将网络会话AIOSession与某个BufferPage关联起来，由此降低并发情况下的锁竞争压力。</p><img src="docs/smart-socket/chapter-5/bufferpage_1.png" width="100%"><p>​ 最终我们的smart-socket内存池实现如下所示。初始化内存池时需要指定内存页的个数，为每个内存页分配的空间大小，以及是否使用直接缓冲区。至于内存页的分配，采用的是轮训策略。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferPagePool</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">BufferPage</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferPageList<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/**\n     * 内存页游标\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token parameter">pageSize</span> 内存页大小\n     * <span class="token keyword">@param</span> <span class="token parameter">poolSize</span> 内存页个数\n     * <span class="token keyword">@param</span> <span class="token parameter">isDirect</span> 是否使用直接缓冲区\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">BufferPagePool</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isDirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bufferPageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferPage</span><span class="token punctuation">[</span>poolSize<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            bufferPageList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferPage</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">,</span> isDirect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 申请内存页\n     *\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">BufferPage</span> <span class="token function">allocateBufferPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//轮训游标，均衡分配内存页</span>\n        cursor <span class="token operator">=</span> <span class="token punctuation">(</span>cursor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> bufferPageList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token class-name">BufferPage</span> page <span class="token operator">=</span> bufferPageList<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> page<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="_4-3-总结"><a class="header-anchor" href="#_4-3-总结">#</a> 4.3 总结</h2><p>​ smart-socket内存池的设计可能在理论层面的探讨会更有意义，它所带来的性能提升和内存优化，很轻易的就会被实际业务场景下的系统业务抵消掉。而smart-socket花费大量精力设计的内存池，是为了达到实验室环境下的最优解。框架层面做的每一次努力，都是期望让更多的硬件资源服务于用户的业务，提升资源利用率。</p>',19),e={render:function(n,s){return p}}}}]);