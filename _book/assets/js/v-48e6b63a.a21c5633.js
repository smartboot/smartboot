(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[350],{6190:(t,e,d)=>{"use strict";d.r(e),d.d(e,{data:()=>r});const r={key:"v-48e6b63a",path:"/smart-servlet/performance/test-data.html",title:"评测数据",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、测试结果",slug:"一、测试结果",children:[]},{level:2,title:"二、压测过程",slug:"二、压测过程",children:[{level:3,title:"2.1 ApacheBench 压测",slug:"_2-1-apachebench-压测",children:[]}]}],filePathRelative:"smart-servlet/performance/test-data.md",git:{updatedTime:1620031724e3,contributors:[{name:"三刀",email:"zhengjunweimail@163.com",commits:1}]}}},4956:(t,e,d)=>{"use strict";d.r(e),d.d(e,{default:()=>a});const r=(0,d(6252).uE)('<h1 id="评测数据"><a class="header-anchor" href="#评测数据">#</a> 评测数据</h1><h2 id="一、测试结果"><a class="header-anchor" href="#一、测试结果">#</a> 一、测试结果</h2><table><thead><tr><th>规范清单</th><th>Tomcat 9</th><th>smart-servlet</th></tr></thead><tbody><tr><td>Servlet Spec</td><td>4.0</td><td>3.1</td></tr><tr><td>Jsp Spec</td><td>2.3</td><td>N/A</td></tr></tbody></table><p>在相同的测试工程下：</p><ul><li>smart-servlet 性能表现结果比 tomcat 高出 50%~100 以上 。</li><li>tomcat 压测期间 CPU 使用率高于 40%，smart-servlet 压测时低于 40% 。</li><li>tomcat 线程数随并发数递增，上限 200；smart-servlet 线程数固定，不受并发数影响 。</li><li>内存开销两者基本持平。</li></ul><blockquote><p>评测在不同的测试方式、测试环境下会有不同的表现。本文结论仅供参考，请以自己的实际测试结果为准。</p></blockquote><h2 id="二、压测过程"><a class="header-anchor" href="#二、压测过程">#</a> 二、压测过程</h2><p>测试方式：先执行 3 次压测，使服务器完成预热，每次压测前都确保端口充分释放。</p><h3 id="_2-1-apachebench-压测"><a class="header-anchor" href="#_2-1-apachebench-压测">#</a> 2.1 ApacheBench 压测</h3><h4 id="_2-1-1-并发量-100"><a class="header-anchor" href="#_2-1-1-并发量-100">#</a> 2.1.1 并发量：100</h4><p><strong>测试命令</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ab -k -c100 -t <span class="token number">10</span> http://127.0.0.1:8080/examples/servlets/servlet/HelloWorldExample\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>测试结果</strong></p><table><thead><tr><th>tomcat / smart-servlet</th><th>Requests per second [count/sec]</th><th>Transfer rate [Kbytes/sec]</th><th>累计YGC</th><th>累计FGC</th></tr></thead><tbody><tr><td>第 1 轮</td><td>18536.55 / 37129.34</td><td>11689.08 / 22806.99</td><td>18 / 22</td><td>1 / 0</td></tr><tr><td>第 2 轮</td><td>21194.69 / 32753.81</td><td>13365.34 / 20119.28</td><td>23 / 28</td><td>1 / 0</td></tr><tr><td>第 3 轮</td><td>22588.81 / 36523.28</td><td>14244.43 / 22434.71</td><td>27 / 34</td><td>1 / 0</td></tr><tr><td>第 4 轮</td><td>20171.81 / 35668.17</td><td>12720.25 / 21909.45</td><td>32 / 42</td><td>1 / 0</td></tr><tr><td>第 5 轮</td><td>21957.96 / 30439.92</td><td>13846.64 / 18697.96</td><td>37 / 52</td><td>1 / 0</td></tr></tbody></table><p><strong>压测小结：</strong></p><ul><li>从 ab 产生的结果来看 smart-servlet 的性能比 tomcat 高出 50%~100% 。</li><li>而且从下图可以看到压测期间 tomcat 线程数增长至 118，而 smart-servlet 始终稳定在 23。</li><li>tomcat 不能很好的支持 http1.0 keep-alive。ab采用了的协议是 Http1.0，压测 tomcat 过程中发现实际建立的连接数超过了500个，而 smart-servlet 稳定在100个。</li></ul><p><img src="docs/smart-servlet/performance/ab_tomcat.jpeg" alt=""></p><p><img src="docs/smart-servlet/performance/ab_smart-servlet.jpeg" alt=""></p><h4 id="_2-1-2-并发量-150"><a class="header-anchor" href="#_2-1-2-并发量-150">#</a> 2.1.2 并发量：150</h4><p><strong>测试命令</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ab -k -c150 -t <span class="token number">10</span> -r http://127.0.0.1:8080/examples/servlets/servlet/HelloWorldExample\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>测试结果</strong></p><table><thead><tr><th>Tomcat / smart-servlet</th><th>Requests per second [count/sec]</th><th>Transfer rate [Kbytes/sec]</th><th>累计YGC</th><th>累计FGC</th></tr></thead><tbody><tr><td>第 1 轮</td><td>18402.97 / 40874.22</td><td>11605.02 / 25107.31</td><td>30 / 16</td><td>1 / 0</td></tr><tr><td>第 2 轮</td><td>25367.06 / 45381.93</td><td>15996.65 / 27876.21</td><td>37 / 19</td><td>1 / 0</td></tr><tr><td>第 3 轮</td><td>25935.43 / 41616.07</td><td>16355.01 / 25563.00</td><td>44 / 21</td><td>1 / 0</td></tr><tr><td>第 4 轮</td><td>26399.91 / 44049.76</td><td>16647.90 / 27057.91</td><td>52 / 25</td><td>1 / 0</td></tr><tr><td>第 5 轮</td><td>24079.55 / 49325.96</td><td>15184.70 / 30298.86</td><td>61 / 29</td><td>1 / 0</td></tr></tbody></table><p><strong>压测小结：</strong></p><ul><li>在 150 的并发下 smart-servlet 的性能比 tomcat 高出 50%~100% 。</li><li>tomcat 线程数增长值 169，smart-servlet 维持23个不变。</li></ul><p><img src="docs/smart-servlet/performance/ab_tomcat_150.jpeg" alt=""></p><p><img src="docs/smart-servlet/performance/ab_smart-servlet_150.jpeg" alt=""></p><h4 id="_2-1-3-并发量-1000"><a class="header-anchor" href="#_2-1-3-并发量-1000">#</a> 2.1.3 并发量：1000</h4><p><strong>测试命令</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ab -k -c1000 -t <span class="token number">10</span> -r http://127.0.0.1:8080/examples/servlets/servlet/HelloWorldExample\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>测试结果</strong></p><table><thead><tr><th>smart-servlet</th><th>Requests per second [count/sec]</th><th>Transfer rate [Kbytes/sec]</th><th>累计YGC</th><th>累计FGC</th></tr></thead><tbody><tr><td>第 1 轮</td><td>37633.03</td><td>23116.38</td><td>15</td><td>0</td></tr><tr><td>第 2 轮</td><td>35776.23</td><td>21975.83</td><td>17</td><td>0</td></tr><tr><td>第 3 轮</td><td>39916.91</td><td>24519.27</td><td>19</td><td>0</td></tr><tr><td>第 4 轮</td><td>38895.61</td><td>23891.93</td><td>21</td><td>0</td></tr><tr><td>第 5 轮</td><td>39318.90</td><td>24151.94</td><td>22</td><td>0</td></tr></tbody></table><p>压测小结：在此并发量下 tomcat 失败率太高，不再进行评测。</p>',33),a={render:function(t,e){return r}}}}]);