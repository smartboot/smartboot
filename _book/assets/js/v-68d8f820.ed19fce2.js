(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[379],{5884:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-68d8f820",path:"/smart-socket/getting-started.html",title:"快速上手",lang:"zh-CN",frontmatter:{author:"三刀",time:"2021-02-27T00:00:00.000Z"},excerpt:"",headers:[{level:2,title:"🚚 项目简介",slug:"项目简介",children:[{level:3,title:"项目优势",slug:"项目优势",children:[]},{level:3,title:"工程结构",slug:"工程结构",children:[]}]},{level:2,title:"🛠 安装",slug:"🛠-安装",children:[]},{level:2,title:"🚀 使用",slug:"🚀-使用",children:[{level:3,title:"通信协议",slug:"通信协议",children:[]},{level:3,title:"服务端/客户端开发",slug:"服务端-客户端开发",children:[]}]}],filePathRelative:"smart-socket/getting-started.md",git:{updatedTime:1620031724e3,contributors:[{name:"三刀",email:"zhengjunweimail@163.com",commits:6}]}}},6908:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>B});var e=a(6252);const t=(0,e.uE)('<h1 id="快速上手"><a class="header-anchor" href="#快速上手">#</a> 快速上手</h1><h2 id="项目简介"><a class="header-anchor" href="#项目简介">#</a> 🚚 项目简介</h2><p>smart-socket 是基于 AIO 技术实现的异步非阻塞通信框架，个人更喜欢称之为「通信微内核」。 因为，「框架」长久以来给人一种高级、复杂的感觉；而「微内核」则显得相对小巧、精致，在使用体验上会更加人性化。</p><p>smart-socket 支持使用 TCP/UDP 进行服务端、客户端的开发，能够覆盖所有通信开发场景。</p><h3 id="项目优势"><a class="header-anchor" href="#项目优势">#</a> 项目优势</h3>',5),p=(0,e.Wm)("li",null,"通过阅读源码可以看到，smart-socket 没有高深的设计技巧，采用的是最朴实的表现手法。翻阅过 Netty 源码的读者可以相互比较一番。",-1),l=(0,e.Wm)("li",null,"smart-socket 的学习门槛相当低，以致于我期望仅通过本页篇幅，便完成使用教程的分享。",-1),r=(0,e.Uk)("smart-socket 的性能表现非常出色，在三方评测"),c={href:"https://www.techempower.com/benchmarks/#section=data-r20&hw=ph&test=plaintext&l=zik0vz-sf",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("TechEmpower"),i=(0,e.Uk)("中的 qps 甚至高出 netty 50% 以上。"),u=(0,e.uE)('<h3 id="工程结构"><a class="header-anchor" href="#工程结构">#</a> 工程结构</h3><p>smart-socket 项目工程内分为四个模块，下面为大家展示他们之间的关系，方便大家对照理解。</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>. → 项目仓库主目录\n├── smart-socket-parent → 项目主模块\n│ │\n│ └── pom.xml\n│\n├── aio-core → 项目基础子模块，仅包含 TCP 的 Server、Client 通信服务，以及内存池。\n│\n├── aio-pro → 项目高级子模块，提供便于开发所需的高级封装，同时附带 UDP 通信能力。\n│\n├── aio-example → 存放 smart-socket 的使用示例，学习过程中可供参考。\n│\n└── pom.xml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="🛠-安装"><a class="header-anchor" href="#🛠-安装">#</a> 🛠 安装</h2><div class="custom-container tip"><p class="custom-container-title">提示</p><p>依赖版本号以实际 maven 仓库中的最新版为准！</p></div>',5),m=(0,e.Uk)(" ```xml "),k=(0,e.Uk)("org.smartboot.socket"),d=(0,e.Uk)("aio-core"),b=(0,e.Uk)("1.5.6"),g=(0,e.Uk)(" ``` "),h=(0,e.Wm)("div",{class:"language-gradle ext-gradle line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-gradle"},[(0,e.Wm)("code",null,"implementation group: 'org.smartboot.socket', name: 'aio-core', version: '1.5.5'\n")]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br")])],-1),f=(0,e.uE)('<blockquote><p>aio-core 仅提供最纯粹的 TCP 通信服务， 而 aio-pro 则包含了丰富的插件，包括：TLS/SSL、心跳、黑名单等，以及 UDP 通信和部分辅助开发的工具包。 你可在需要的时候选择性使用。</p></blockquote><h2 id="🚀-使用"><a class="header-anchor" href="#🚀-使用">#</a> 🚀 使用</h2><h3 id="通信协议"><a class="header-anchor" href="#通信协议">#</a> 通信协议</h3><p>通信协议约定了服务端与客户端之间交互数据的识别规则，是通信中非常重要的一部分。</p><p>在短连接场景下，可以通过 EOF(即 readSize 等于 -1) 标志来定义完整数据包的内容。 虽然这种方式不规范，也不推荐，但不可否则确实简单、有效。</p><p>而在如今的万物互联时代下，长连接成了更为普遍的应用场景，链路复用是目前通信形式的主旋律。我们必须掌握正确的数据处理方式，以获得高效、准确的通信数据。</p><p>基于协议实现的编解码算法，必须成为每个通信开发人员的必备能力。 依照个人经验，判断一个程序员是否具备通信开发的能力，取决于他是否还会视半包、粘包为「问题」。 此处先不过多展开，有机会在专门通过一篇文章来与大家作进一步交流。</p><p>回到本节主题，我们设计了一个非常简单的协议用于演示 smart-socket 的使用方式。</p><div class="custom-container tip"><p class="custom-container-title">协议规则</p><table><thead><tr><th></th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>消息头</td><td>4字节</td><td>表示消息体长度</td></tr><tr><td>消息体</td><td>N字节</td><td>N：消息头对应的int数值长度</td></tr></tbody></table></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringProtocol</span> <span class="token keyword">implements</span> <span class="token class-name">Protocol</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> readBuffer<span class="token punctuation">,</span> <span class="token class-name">AioSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> remaining <span class="token operator">=</span> readBuffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>BYTES<span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        readBuffer<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> length <span class="token operator">=</span> readBuffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> readBuffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            readBuffer<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        readBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        readBuffer<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>通信开发的核心是：「<strong>面向协议编程</strong>」。敲黑板，这是知识点！</p></div><h3 id="服务端-客户端开发"><a class="header-anchor" href="#服务端-客户端开发">#</a> 服务端/客户端开发</h3><p>服务端与客户端的开发，主要是基于<code>MessageProcess#process</code>实现接收到的消息的处理逻辑。 如果在此方法中调用了 session 的 <code>WriteBuffer#write</code>，将会在执行完毕后由 smart-socket 自动执行 flush。 而如果你是在<code>MessageProcess#process</code>之外的其他线程中执行数据输出，记得在write之后一定要调用一下 flush。</p>',13),W=(0,e.Uk)(" ```java public class StringServer { "),w=(0,e.Wm)("pre",null,[(0,e.Wm)("code",null,'public static void main(String[] args) throws IOException {\n    MessageProcessor<String> processor = new MessageProcessor<String>() {\n        @Override\n        public void process(AioSession session, String msg) {\n            System.out.println("receive from client: " + msg);\n            WriteBuffer outputStream = session.writeBuffer();\n            try {\n                byte[] bytes = msg.getBytes();\n                outputStream.writeInt(bytes.length);\n                outputStream.write(bytes);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    };\n\n    AioQuickServer server = new AioQuickServer(8888, new StringProtocol(), processor);\n    server.start();\n}\n')],-1),v=(0,e.Wm)("p",null,"}",-1),S=(0,e.Wm)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-text"},[(0,e.Wm)("code",null,'</CodeGroupItem>\n<CodeGroupItem title="StringClient">\n\n```java\npublic class StringClient {\n\n    public static void main(String[] args) throws IOException {\n        MessageProcessor<String> processor = new MessageProcessor<String>() {\n            @Override\n            public void process(AioSession session, String msg) {\n                System.out.println("receive from server: " + msg);\n            }\n        };\n        AioQuickClient client = new AioQuickClient("localhost", 8888, new StringProtocol(), processor);\n        AioSession session = client.start();\n        WriteBuffer writeBuffer = session.writeBuffer();\n        byte[] data = "hello smart-socket".getBytes();\n        writeBuffer.writeInt(data.length);\n        writeBuffer.write(data);\n        writeBuffer.flush();\n    }\n}\n')]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"16"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"17"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"18"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"19"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"20"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"21"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"22"),(0,e.Wm)("br")])],-1),y=(0,e.Wm)("p",null,"smart-socket 默认的配置就具备了较好的性能表现，因此在实例化 AioQuickServer/AioQuickClient 对象之后大可直接调用 start 方法。 如果期望追究性能的最佳实践，我们会在之后的篇幅中作单独分享。",-1),B={render:function(n,s){const a=(0,e.up)("OutboundLink"),B=(0,e.up)("groupId"),P=(0,e.up)("artifactId"),x=(0,e.up)("version"),C=(0,e.up)("dependency"),I=(0,e.up)("CodeGroupItem"),U=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("ul",null,[p,l,(0,e.Wm)("li",null,[r,(0,e.Wm)("a",c,[o,(0,e.Wm)(a)]),i])]),u,(0,e.Wm)(U,null,{default:(0,e.w5)((()=>[(0,e.Wm)(I,{title:"maven",active:""},{default:(0,e.w5)((()=>[m,(0,e.Wm)(C,null,{default:(0,e.w5)((()=>[(0,e.Wm)(B,null,{default:(0,e.w5)((()=>[k])),_:1}),(0,e.Wm)(P,null,{default:(0,e.w5)((()=>[d])),_:1}),(0,e.Wm)(x,null,{default:(0,e.w5)((()=>[b])),_:1})])),_:1}),g])),_:1}),(0,e.Wm)(I,{title:"gradle"},{default:(0,e.w5)((()=>[h])),_:1})])),_:1}),f,(0,e.Wm)(U,null,{default:(0,e.w5)((()=>[(0,e.Wm)(I,{title:"StringServer",active:""},{default:(0,e.w5)((()=>[W,w,v,S])),_:1})])),_:1}),y],64)}}}}]);