(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[594],{7150:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-755df962",path:"/smart-http/getting-started-client.html",title:"快速上手",lang:"zh-CN",frontmatter:{author:"三刀"},excerpt:"",headers:[{level:3,title:"示例程序",slug:"示例程序",children:[]}],filePathRelative:"smart-http/getting-started-client.md",git:{updatedTime:1623571657e3,contributors:[{name:"三刀",email:"zhengjunweimail@163.com",commits:2}]}}},6922:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="快速上手"><a class="header-anchor" href="#快速上手">#</a> 快速上手</h1><h3 id="示例程序"><a class="header-anchor" href="#示例程序">#</a> 示例程序</h3><p>下面是使用 smart-http 进行客户端开发最简单的一段代码。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpGetDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        httpClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        httpClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token operator">::</span><span class="token function">printStackTrace</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们推荐采用响应式编程范式进行客户端开发，比如注册 <strong>onSuccess</strong>、<strong>onFailure</strong> 等回调事件。 当然，调用 <strong>send</strong> 方法返回的 <strong>Future</strong> 对象依旧能满足您对于同步调用的需求。</p>',5),p={render:function(n,s){return t}}}}]);