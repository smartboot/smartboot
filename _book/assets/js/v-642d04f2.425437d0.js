(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[327],{2704:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-642d04f2",path:"/smart-socket/chapter-2/Interface/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"核心接口与状态机",slug:"核心接口与状态机",children:[{level:3,title:"状态机StateMachineEnum",slug:"状态机statemachineenum",children:[]}]}],filePathRelative:"smart-socket/chapter-2/Interface/README.md",git:{updatedTime:1623571657e3,contributors:[{name:"三刀",email:"zhengjunweimail@163.com",commits:2}]}}},6440:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="核心接口与状态机"><a class="header-anchor" href="#核心接口与状态机">#</a> 核心接口与状态机</h2><p>业界有句话叫“一流的卖标准、二流的卖技术、三流的卖产品”，如果说 smart-socket 的技术价值仅算二流水准的话，那么我们为其精心设计的接口期望能稍微提升一下它的档次。</p><p>smart-socket的学习成本主要集中在两个接口<code>Protocol</code>、<code>MessageProcessor</code>和一个状态机<code>StateMachineEnum</code>。 接口定义了数据处理规则，而状态机则是事件一种通知机制。</p><p>###一、核心接口 这两个核心接口在通信流程中的职责如下：</p><ul><li>Protocol：负责解析网络中传输过来的字节流，将其转换成消息实体，并传递至 MessageProcessor 进行业务处理。</li><li>MessageProcessor：处理接受到的网络消息，并在必要时候输出消息至对端。 <img src="docs/smart-socket/chapter-2/Interface/core-api.png" alt=""></li></ul><p>当然，你也可以在 Protocol 中一次性完成解析、业务处理； 又或者将 Protocol 当个摆设，所有事情集中在 MessageProcessor 完成。 smart-socket 不限制你实现功能的自由性，只是提供一个更规范、更合理的建议，最终决定权还是在用户的手中。</p><h4 id="protocol"><a class="header-anchor" href="#protocol">#</a> Protocol</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Protocol</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> readBuffer<span class="token punctuation">,</span> <span class="token class-name">AioSession</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Protocol 是一个泛型接口，<code>&lt;T&gt;</code>指的是业务消息实体类，smart-socket 中不少地方都运用了泛型设计，其含义都代表数据解码后封装的消息类型。</p><p>decode（消息解码），AIO 的数据传输是以 ByteBuffer 为媒介的。所有读取到的字节数据都会填充在 ByteBuffer 中并以事件回调的形式触发 Protocol#decode() 方法。所以我们实现的 decode 算法就是 ByteBuffer 对象转化为业务消息<code>&lt;T&gt;</code>的过程。</p><p>需要强调一点，读者朋友请不要把解码想的很简单，令人“深恶痛绝”的半包/粘包就是在这个环节需要应对的。 大家不要寄希望于框架自动解决半包/粘包问题，因为这个问题的解决是靠你的解码算法去做容错的。 如果哪个框架宣称解决了此问题，那边通常有两种情况：</p><ol><li>你所需的协议是由该框架提供的，它的解码算法确实能兼容了半包/粘包情况。</li><li>框架提供了一种宽松内存策略，确保你能接受到一个完整的包。</li></ol><p>无论何种情况，对个人而言都不是一件好事。 在你没有理解半包/粘包的出现场景和应对策略之前，过渡依赖框架的只会限制你对通信的认知，也会增加与内行人士的沟通难道。</p><h4 id="messageprocessor"><a class="header-anchor" href="#messageprocessor">#</a> MessageProcessor</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 处理接收到的消息\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">session</span> 通信会话\n     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>     待处理的业务消息\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> session<span class="token punctuation">,</span> <span class="token class-name">T</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 状态机事件,当枚举事件发生时由框架触发该方法\n     *\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">session</span>          本次触发状态机的AioSession对象\n     * <span class="token keyword">@param</span> <span class="token parameter">stateMachineEnum</span> 状态枚举\n     * <span class="token keyword">@param</span> <span class="token parameter">throwable</span>        异常对象，如果存在的话\n     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">StateMachineEnum</span></span>\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">stateEvent</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> session<span class="token punctuation">,</span> <span class="token class-name">StateMachineEnum</span> stateMachineEnum<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>smart-socket 在通过 Protocol 完成消息解码后，会将消息对象交由 MessageProcessor 实现类进行业务处理。</p><ul><li>process 消息处理器，smart-socket 每接收到一个完整的业务消息，都会交由该处理器执行。</li><li>stateEvent 执行状态机，smart-socket 内置了状态枚举<code>StateMachineEnum</code>。<code>MessageProcessor</code>实现类可在此方法中处理其关注的事件。</li></ul><h3 id="状态机statemachineenum"><a class="header-anchor" href="#状态机statemachineenum">#</a> 状态机StateMachineEnum</h3><p>smart-socket 中引入了状态机的概念，状态机的存在不会决策 smart-socket 对于通信的事件处理，但会在特定事件发生之时通知消息处理器<code>MessageProcessor#stateEvent</code>。目前已有的状态枚举为：</p><table><thead><tr><th>状态枚举</th><th>说明</th></tr></thead><tbody><tr><td>NEW_SESSION</td><td>网络连接建立时触发，连接建立时会构建传输层的AioSession，如果业务层面也需要维护一个会话，可在此状态机中处理</td></tr><tr><td>INPUT_SHUTDOWN</td><td>数据读取完毕时触发，即传统意义中的<code>read()==-1</code></td></tr><tr><td>INPUT_EXCEPTION</td><td>读数据过程中发生异常时触发此状态机</td></tr><tr><td>OUTPUT_EXCEPTION</td><td>写数据过程中发生异常时触发此状态机</td></tr><tr><td>SESSION_CLOSING</td><td>触发了AioSession.close方法，但由于当前AioSession还有未完成的事件，会进入SESSION_CLOSING状态</td></tr><tr><td>SESSION_CLOSED</td><td>AioSesson完成close操作后触发此状态机</td></tr><tr><td>PROCESS_EXCEPTION</td><td>业务处理异常</td></tr><tr><td>DECODE_EXCEPTION</td><td>解码异常</td></tr><tr><td>REJECT_ACCEPT</td><td>服务端拒绝客户端连接请求</td></tr></tbody></table><p>状态机贯穿了通信服务的整个生命周期，在这个过程中不同事件的发生会触发不同的状态机。通信事件与状态机的关系如下图所示。</p><img src="docs/smart-socket/chapter-2/Interface/2.2.2_1.png" width="90%"><p>状态机相对于整个通信环境的各个节点只是一个旁观者，它见证了各个事件的发生，却无力扭转事件的发展方向。</p><p>状态机的本质跟大家所认知的过滤器、拦截器有点类似，那为什么smart-socket要如此设计呢？想想一下如果我们按照过滤器的设计思路，其形态会如下所示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">newSession</span><span class="token punctuation">(</span><span class="token class-name">AioSesion</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">processException</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">decodeExcepton</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">inputException</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">outputException</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">sessionClosing</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">sessionClosed</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样的设计存在以下缺陷：</p><ol><li>对实现类不友好；也许我只想处理 newSession，却不得不保留其余方法的空实现；</li><li>无法平滑升级；加入新版本中加入新的事件类型，老版本代码需要全部更改；</li></ol><p>而采用状态机模式，不仅解决了上述问题，还为通信服务的多元化扩展带了便利。 例如 IM 场景下，我们在 NEW_SESSION 状态机中收集 Session 集合，在消息处理时很容易就能实现消息群发； 当某个用户断线后，我们及时在状态机 SESSION_CLOSED 中感知到并更新 Session 集合中的会话状态，甚至可以群发消息给所有用户“某某人掉线了”。这些通信状态和业务相结合的场景， 用状态机能很好的得以解决。最后奉上一段粗糙的伪代码，读者自行领悟。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IMProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">MessageProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">LinkedBlockingQueue</span> sessions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> session<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span> otherSession<span class="token operator">:</span>sessions<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>otherSession<span class="token operator">==</span>session<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">sendMessage</span><span class="token punctuation">(</span>otherSession<span class="token punctuation">,</span>session<span class="token operator">+</span><span class="token string">&quot;群发送消息：&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stateEvent</span><span class="token punctuation">(</span><span class="token class-name">AioSession</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> session<span class="token punctuation">,</span> <span class="token class-name">StateMachineEnum</span> state<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">case</span> NEW_SESSION<span class="token operator">:</span>\n                sessions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token keyword">case</span> SESSION_CLOSED<span class="token operator">:</span>\n                sessions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',29),p={render:function(s,n){return e}}}}]);